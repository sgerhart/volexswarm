name: VolexSwarm CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      vault:
        image: hashicorp/vault:latest
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: >-
          --health-cmd "vault status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: volexswarm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment
      run: |
        export VAULT_ADDR=http://localhost:8200
        export VAULT_TOKEN=root
        export DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/volexswarm_test
    
    - name: Initialize Vault
      run: |
        export VAULT_ADDR=http://localhost:8200
        export VAULT_TOKEN=root
        vault secrets enable -path=secret kv-v2 || true
        vault kv put secret/api_keys/binance api_key="test_key" secret_key="test_secret"
        vault kv put secret/agents/research data_sources='["binance"]' update_interval="300"
    
    - name: Run tests
      run: |
        export VAULT_ADDR=http://localhost:8200
        export VAULT_TOKEN=root
        export DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/volexswarm_test
        
        # Test Vault integration
        python scripts/test_vault.py
        
        # Test database connection
        python scripts/test_db.py
        
        # Test research agent (if available)
        # python scripts/test_enhanced_research.py
        
        # Test autonomous AI
        # python scripts/test_autonomous_ai.py
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        pip install black
        black --check --diff .

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security checks
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker images
      run: |
        docker build -f docker/research.Dockerfile -t volexswarm-research .
        docker build -f docker/signal.Dockerfile -t volexswarm-signal .
        docker build -f docker/execution.Dockerfile -t volexswarm-execution .
        docker build -f docker/meta.Dockerfile -t volexswarm-meta .
    
    - name: Test Docker images
      run: |
        docker run --rm volexswarm-research python -c "print('Research agent image built successfully')"
        docker run --rm volexswarm-signal python -c "print('Signal agent image built successfully')"
        docker run --rm volexswarm-execution python -c "print('Execution agent image built successfully')"
        docker run --rm volexswarm-meta python -c "print('Meta agent image built successfully')" 